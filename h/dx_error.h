
/* dx_error.h : DoneX错误头文件. Combo.xy */

#ifndef _DX_ERROR_H_
#define _DX_ERROR_H_


#ifdef __cplusplus
extern "C" {
#endif


/********************************************************************************
 * 错误号获取或者设置
 ********************************************************************************/
extern  void        dx_set_errcode(int err);
extern  int         dx_get_errcode();
extern  const char *dx_get_errinfo(int err);


/********************************************************************************
 * 错误类型定义 (由'模块号'(8位)+'功能号'(8位)+'文件行'(16位)组成)
 ********************************************************************************/
typedef int DX_ERR;


/********************************************************************************
 * 默认的模块号和功能号
 ********************************************************************************/
#ifndef DX_MOD
#define DX_MOD      0xFF
#endif
#ifndef DX_FUN
#define DX_FUN      0xFF
#endif


/********************************************************************************
 * 错误码组装
 ********************************************************************************/
#define DX_FAIL     ((((DX_MOD) & 0xFF) << 24) | \
                     (((DX_FUN) & 0xFF) << 16) | \
                      ((__LINE__) & 0xFFFF))


/********************************************************************************
 * 错误码基址
 ********************************************************************************/
enum DX_ERR_BASE {
    DX_OK = 0,                                                  /* 成功码 */
    DX_ERR_OS,                                                  /* 基础 */
    DX_ERR_KERNEL,                                              /* 内核 */
    DX_ERR_MEM,                                                 /* 内存 */
    DX_ERR_TASK,                                                /* 任务 (线程) */
    DX_ERR_SEM,                                                 /* 信号量 */

    DX_FAILED = -1                                              /* 失败 (通用) */
};


/********************************************************************************
 * 基础错误码
 ********************************************************************************/
enum DX_ERR_OS {
    DX_ERR_OS_BASE = (DX_ERR_OS) << 16,

    DX_NOHANDLE,                                                /* (0x00010001) 不是正确的句柄 */
    DX_NOSTACK,                                                 /* (0x00010002) 栈内存不足 */
};


/********************************************************************************
 * 内核错误码
 ********************************************************************************/
enum {
    DX_ERR_KERNEL_BASE = (DX_ERR_OS) << 16,

    DX_ERR_KERNEL_SCHED,                                        /* (0x00020001) 内核调度错误 */
};


/********************************************************************************
 * 常用错误码信息
 ********************************************************************************/
#define DX_ERR_INFOS                                                    \
    {DX_OK,                 "ok"},                                      \
    {DX_NOHANDLE,           "no correct handle"},                       \
    {DX_NOSTACK,            "no stack memory"},                         \
    {DX_ERR_KERNEL_SCHED,   "kernel schedule error"},                   \
    {DX_FAILED,             "failed"}


#ifdef __cplusplus
}
#endif


#endif /* #ifndef _DX_ERROR_H_ */
