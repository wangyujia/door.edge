
/* dx_adapt.h : DoneX适配头文件. Combo.xy */

#ifndef _DX_ADAPT_H_
#define _DX_ADAPT_H_


#ifdef __cplusplus
extern "C" {
#endif


/********************************************************************************
 * 入口 ('软件入口'需要编译到指定位置，并在CPU启动后加载)
 ********************************************************************************/
extern  void        dx_entry();                                 /* [函数]软件入口 (需要外部调用) */
extern  void        dx_intr_entry(int cpu, int irq);            /* [函数]中断入口 (需要外部调用) */


/********************************************************************************
 * CPU数量 (可同时运行的CPU核心数)
 ********************************************************************************/
extern  int         dx_cpu_count();                             /* [函数]获取CPU数量 */
extern  int         dx_cpu_current();                           /* [函数]获取当前CPU */


/********************************************************************************
 * 通过禁止和恢复中断来进行临界资源的保护 (需要使用对应CPU指令实现)
 ********************************************************************************/
extern  void        dx_intr_disable(int cpu);                   /* [函数]禁止指定CPU产生中断 */
extern  void        dx_intr_enable (int cpu);                   /* [函数]使能指定CPU产生中断 */


/********************************************************************************
 * 保存和恢复CPU运行的上下文来进行线程的切换 (需要使用对应CPU指令实现)
 ********************************************************************************/
extern  void        dx_context_init(void *stack_context,        /* [函数]在栈中初始化CPU上下文 */
                                    void *stack_start,          /* [输入]调用栈开始位置 */
                                    void *inst_addr,            /* [输入]指令地址 */
                                    void *inst_para);           /* [输入]指令参数 */
extern  void        dx_context_exec(                            /* [函数]当前CPU开始执行指令 */
                                    void *stack_start,          /* [输入]调用栈开始位置 */
                                    void *inst_addr,            /* [输入]指令地址 */
                                    void *inst_para);           /* [输入]指令参数 */
extern  int         dx_context_size();                          /* [函数]上下文的大小 */
extern  void        dx_context_save(void *stack_context);       /* [函数]从CPU中保存上下文到栈中 */
extern  void        dx_context_load(void *stack_context);       /* [函数]从栈中恢复上下文到CPU中 */


/********************************************************************************
 * 内存地址
 ********************************************************************************/
extern  void *      dx_mem_base();                              /* [函数]获取内存起始 */
extern  int         dx_mem_size();                              /* [函数]获取内存大小 */


/********************************************************************************
 * 栈增长方式
 ********************************************************************************/
extern int          dx_stack_growth();                          /* [函数]获取栈增长方式 */
                                                                /* [返回]栈增长方式
                                                                    0: Full  descending 满递减堆栈
                                                                    1: Full  ascending  满递增堆栈
                                                                    2: Empty descending 空递减堆栈
                                                                    3: Empty ascending  空递增堆栈
                                                                */


/********************************************************************************
 * 定时中断号和定时间隔时间
 ********************************************************************************/
extern  int         dx_tick_irq();                              /* [函数]获取定时调度中断号 */
extern  int         dx_tick_interval();                         /* [函数]获取定时调度中断时间间隔 */


/********************************************************************************
 * 系统错误处理
 ********************************************************************************/
extern  void        dx_fetal_handle(int error);                 /* [函数]处理处理 */
                         


#ifdef __cplusplus
}
#endif


#endif /* #ifndef _DX_ADAPT_H_ */
