
/* dx_task.h : DoneX任务(线程)头文件. Combo.xy */

#ifndef _DX_TASK_H_
#define _DX_TASK_H_

#include "../../h/donex.h"
#include "dx_kernel.h"


#ifdef __cplusplus
extern "C" {
#endif


/********************************************************************************
 * 最小栈大小 (可运行的每个任务的最小栈内存)
 ********************************************************************************/
#define DX_TASK_STACK_SIZE_MIN 1024                             /* 默认栈大小 */


/********************************************************************************
 * 任务状态
 ********************************************************************************/
enum DX_TASK_STAT {
    DX_TASK_STAT_READY = 0,                                     /* 已就绪 */
    DX_TASK_STAT_RUN,                                           /* 在运行 */
    DX_TASK_STAT_PEND,                                          /* 被阻塞 */
    DX_TASK_STAT_DELAY,                                         /* 被延时 */
    DX_TASK_STAT_SUSPEND,                                       /* 被挂起 */
    DX_TASK_STAT_DELETED                                        /* 已删除 */
};
/********************************************************************************
 * 任务调度状态机:
 *                                      [switch in]
 *                      +---------+ -------------------> +---------+
 *  [create] ---------> |  READY  |                      |   RUN   |
 *                      +--^---^--+ <------------------- +--+---+--+
 *                         |   |        [switch out]        |   |
 *                         |   |                            |   |
 *                         |   |                            |   |
 *                         |   |                            |   |
 *                         |   |  [gain]  +------+  [wait]  |   |
 *                         |   +--------- | PEND | <--------+   |
 *                         |    [timeout] +------+              |
 *                         |                                    |
 *                         |                                    |
 *                         |                                    |
 *                         |              +-------+             |
 *                         +------------- | DELAY | <-----------+
 *                            [expired]   +-------+    [delay]
 * 
 * 
 *                      +-------+   [suspend]
 *                      | RUN   | -------------> +---------+
 *                      | READY |                | SUSPEND | ---+
 *                      | PEND  | <------------- +---------+    |
 *                      | DELAY |    [resume]                   |
 *                      +-------+                               |
 *                          |                                   |
 * [destroy] .............. | ................................. |
 *                          |                    +---------+    |
 *                          +------------------> | DELETED | <--+
 *                                               +---------+
 ********************************************************************************/


/********************************************************************************
 * [任务全局表] [任务优先级表] (每个优先级都有对应一个链)
 *  +
 *  |        |            |          |            |          |            |
 *  |        | call stack |          | call stack |          | call stack |
 *  |        +------------+          +------------+          +------------+
 *  |        |  context   |          |  context   |          |  context   |
 *  |        +------------+          +------------+          +------------+
 *  |        |    vars    |          |    vars    |          |    vars    |
 *  |        +------------+          +------------+          +------------+
 *  +------> |    TCB     | -------> |    TCB     | -------> |    TCB     | ---> ...
 *           +------------+          +------------+          +------------+
 *           |    name    |          |    name    |          |    name    |
 *           +------------+          +------------+          +------------+
 * 
 * [空闲节点查找过程] (中间删除任务后的idle位置如何合适则使用，不合适则使用最后的栈位置)
 * +                                       +---------------------------+
 * |        |      |      |      |      |  v   |      |      |     |   |
 * |        | task |      | task |      | task |      | task |     |   v  |
 * |        | used |      | used |      | idle |      | used |     | last |
 * |        +-^--+-+      +-^--+-+      +-^--+-+      +-^--+-+     +------+
 * |          |  |          |  |          |  |          |  |
 * +----------+  +----------+  +----------+  +----------+  -
 ********************************************************************************/


/********************************************************************************
 * 任务链表节点
 ********************************************************************************/
typedef struct DX_TASK_NODE_S {
    DX_DLL_NODE(struct DX_TASK_NODE_S);
} DX_TASK_NODE;


/********************************************************************************
 * 任务链表头部
 ********************************************************************************/
typedef struct DX_TASK_HEAD_S {
    DX_DLL_HEAD(DX_TASK_NODE);
} DX_TASK_HEAD;


/********************************************************************************
 * 任务控制块 (TCB)
 ********************************************************************************/
typedef struct DX_TASK_S {
    char                magic[4];                               /* 魔术字 */
    char *              name;                                   /* 任务名称 */
    int                 size;                                   /* 栈大小 */
    void              (*entry)(void *);                         /* 任务入口 */
    void *              para;                                   /* 任务参数 */
    DX_U8               prio;                                   /* 任务优先级 */
    DX_U8               state;                                  /* 运行状态 */
    DX_U16              cpu;                                    /* 所在CPU */
    DX_U8               state_suspend;                          /* 挂起时的状态 */
    DX_U8               reserved1;                              /* 保留 */
    DX_U16              reserved2;                              /* 保留 */
    void *              wait_object;                            /* 等待对象 */
    DX_TASK_NODE        node_list;                              /* 任务全局队列链表节点 */
    DX_TASK_NODE        node_prio;                              /* 优先级队列链表节点 */
    DX_TASK_NODE        node_wait;                              /* 对象等待队列链表节点 */
} DX_TASK;


/********************************************************************************
 * 任务全局表
 ********************************************************************************/
extern DX_TASK_HEAD     dx_task_list;


/********************************************************************************
 * 任务优先级表
 ********************************************************************************/
extern DX_TASK_HEAD     dx_task_prio[DX_PRIO_COUNT];


/********************************************************************************
 * 任务运行表
 ********************************************************************************/
extern DX_TASK *        dx_task_cpu[DX_CPU_MAX];                /* 运行在各个CPU的任务 */


/********************************************************************************
 * 任务初始化接口
 ********************************************************************************/
extern  void            dx_task_init();                         /* 任务初始化 */
extern  void            dx_task_magic_init(DX_TASK *t);         /* 任务魔术字初始化 */
extern  DX_BOOL         dx_task_magic_comp(DX_TASK *t);         /* 任务魔术字判断 */
extern  DX_TASK *       dx_task_is_handle(void *handle);        /* 判断是否是句柄 */


/********************************************************************************
 * 任务栈基址分配
 ********************************************************************************/
extern  void *          dx_stack_last;                          /* 栈最后位置 */
extern  DX_TASK *       dx_task_idle(int need);                 /* 任务空闲栈 */


/********************************************************************************
 * 任务调度
 ********************************************************************************/
extern void             dx_task_sched();                        /* 内核调度时 */
extern void             dx_task_switch(                         /* 任务切换 */
                            int cpu,                            /* cpu号 */
                            DX_TASK *task);                     /* 任务控制块 */


/********************************************************************************
 * 任务等待和获得对象
 ********************************************************************************/
extern void             dx_task_wait(                           /* 任务等待 */
                            void *object,                       /* 等待对象 */
                            int milliseconds);                  /* 超时时间 */
extern void             dx_task_gain(                           /* 任务获取 */
                            void *object);                      /* 等待对象 */


#ifdef __cplusplus
}
#endif

#endif /* #ifndef _DX_MODULE_H_ */
